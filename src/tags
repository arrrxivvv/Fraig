!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AIG_GATE	cir/cirDef.h	/^   AIG_GATE   = 3,$/;"	e	enum:GateType
AIG_GATE	cir/cirDefRic.h	/^   AIG_GATE   = 3,$/;"	e	enum:GateType
ALL	cir/cirGate.h	125;"	d
AigGate	cir/cirGate.h	/^	AigGate( unsigned id, unsigned l, unsigned c = 0 ) : $/;"	f	class:AigGate
AigGate	cir/cirGate.h	/^class AigGate : public CirGate$/;"	c
AigashKey	cir/cirFraig.cpp	/^   AigashKey( const vector< PtrV<CirGate> >& f ): _fanins(f) {$/;"	f	class:AigashKey
AigashKey	cir/cirFraig.cpp	/^class AigashKey$/;"	c	file:
CANNOT_INVERTED	cir/cirMgr.cpp	/^   CANNOT_INVERTED,$/;"	e	enum:CirParseError	file:
CIRCMDTOT	cir/cirCmd.cpp	/^   CIRCMDTOT$/;"	e	enum:CirCmdState	file:
CIRFRAIG	cir/cirCmd.cpp	/^   CIRFRAIG,$/;"	e	enum:CirCmdState	file:
CIRINIT	cir/cirCmd.cpp	/^   CIRINIT,$/;"	e	enum:CirCmdState	file:
CIROPT	cir/cirCmd.cpp	/^   CIROPT,$/;"	e	enum:CirCmdState	file:
CIRREAD	cir/cirCmd.cpp	/^   CIRREAD,$/;"	e	enum:CirCmdState	file:
CIRSIMULATE	cir/cirCmd.cpp	/^   CIRSIMULATE,$/;"	e	enum:CirCmdState	file:
CIRSTRASH	cir/cirCmd.cpp	/^   CIRSTRASH,$/;"	e	enum:CirCmdState	file:
CIR_CMD_H	cir/cirCmd.h	10;"	d
CIR_DEF_H	cir/cirDef.h	10;"	d
CIR_DEF_H	cir/cirDefRic.h	10;"	d
CIR_GATE_H	cir/cirGate.h	10;"	d
CIR_MGR_H	cir/cirMgr.h	10;"	d
CONST_GATE	cir/cirDef.h	/^   CONST_GATE = 4,$/;"	e	enum:GateType
CONST_GATE	cir/cirDefRic.h	/^   CONST_GATE = 4,$/;"	e	enum:GateType
Cache	util/myHash.h	/^   Cache() : _size(0), _cache(0) {}$/;"	f	class:Cache
Cache	util/myHash.h	/^   Cache(size_t s) : _size(0), _cache(0) { init(s); }$/;"	f	class:Cache
Cache	util/myHash.h	/^class Cache$/;"	c
CacheNode	util/myHash.h	/^typedef pair<CacheKey, CacheData> CacheNode;$/;"	t	class:Cache
CirCmdState	cir/cirCmd.cpp	/^enum CirCmdState$/;"	g	file:
CirFraigCmd	cir/cirCmd.h	/^CmdClass(CirFraigCmd);$/;"	v
CirGate	cir/cirGate.h	/^   CirGate( unsigned id, unsigned l, unsigned c = 0, string n = "" ) : $/;"	f	class:CirGate
CirGate	cir/cirGate.h	/^class CirGate$/;"	c
CirGateCmd	cir/cirCmd.h	/^CmdClass(CirGateCmd);$/;"	v
CirMgr	cir/cirMgr.h	/^   CirMgr() : _simmed( false ) {}$/;"	f	class:CirMgr
CirMgr	cir/cirMgr.h	/^class CirMgr$/;"	c
CirOptCmd	cir/cirCmd.h	/^CmdClass(CirOptCmd);$/;"	v
CirParseError	cir/cirMgr.cpp	/^enum CirParseError {$/;"	g	file:
CirPrintCmd	cir/cirCmd.h	/^CmdClass(CirPrintCmd);$/;"	v
CirReadCmd	cir/cirCmd.h	/^CmdClass(CirReadCmd);$/;"	v
CirSimCmd	cir/cirCmd.h	/^CmdClass(CirSimCmd);$/;"	v
CirStrashCmd	cir/cirCmd.h	/^CmdClass(CirStrashCmd);$/;"	v
CirSweepCmd	cir/cirCmd.h	/^CmdClass(CirSweepCmd);$/;"	v
CirWriteCmd	cir/cirCmd.h	/^CmdClass(CirWriteCmd);$/;"	v
Clause	sat/SolverTypes.h	/^    Clause(bool learnt, const vec<Lit>& ps, ClauseId id_ = ClauseId_NULL) {$/;"	f	class:Clause
Clause	sat/SolverTypes.h	/^class Clause {$/;"	c
ClauseId	sat/SolverTypes.h	/^typedef int ClauseId;     \/\/ (might have to use uint64 one day...)$/;"	t
ClauseId_NULL	sat/SolverTypes.h	/^const   int ClauseId_NULL = INT_MIN;$/;"	v
Clause_new	sat/SolverTypes.h	/^inline Clause* Clause_new(bool learnt, const vec<Lit>& ps, ClauseId id = ClauseId_NULL) {$/;"	f
Const0Gate	cir/cirGate.h	/^	Const0Gate() : CirGate( 0, 0 ) {}$/;"	f	class:Const0Gate
Const0Gate	cir/cirGate.h	/^class Const0Gate : public CirGate$/;"	c
DEFAULTS	sat/File.h	40;"	d
DEFAULTS	sat/File.h	48;"	d
DUMMY_END	cir/cirMgr.cpp	/^   DUMMY_END$/;"	e	enum:CirParseError	file:
Datum	sat/Global.h	/^    typedef T   Datum;$/;"	t	class:vec
EXTRA_SPACE	cir/cirMgr.cpp	/^   EXTRA_SPACE,$/;"	e	enum:CirParseError	file:
Exception_EOF	sat/File.h	/^class Exception_EOF {};$/;"	c
File	sat/File.h	/^    File(cchar* name, cchar* mode) : DEFAULTS {$/;"	f	class:File
File	sat/File.h	/^    File(int fd, FileMode mode, bool own_fd = true) : DEFAULTS  {$/;"	f	class:File
File	sat/File.h	/^    File(void) : DEFAULTS {}$/;"	f	class:File
File	sat/File.h	/^class File {$/;"	c
FileMode	sat/File.h	/^enum FileMode { READ, WRITE };$/;"	g
File_BufSize	sat/File.h	22;"	d
File_h	sat/File.h	2;"	d
GClause	sat/SolverTypes.h	/^    GClause(void* d) : data(d) {}$/;"	f	class:GClause
GClause	sat/SolverTypes.h	/^class GClause {$/;"	c
GClause_NULL	sat/SolverTypes.h	137;"	d
GClause_new	sat/SolverTypes.h	/^inline GClause GClause_new(Clause* c) { assert(((uintp)c & 1) == 0); return GClause((void*)c); }$/;"	f
GClause_new	sat/SolverTypes.h	/^inline GClause GClause_new(Lit p)     { return GClause((void*)(((intp)index(p) << 1) + 1)); }$/;"	f
GateArray	cir/cirDefRic.h	/^typedef CirGate**                  GateArray;$/;"	t
GateList	cir/cirDef.h	/^typedef vector<CirGate*>           GateList;$/;"	t
GateList	cir/cirDefRic.h	/^typedef vector<CirGate*>           GateList;$/;"	t
GateType	cir/cirDef.h	/^enum GateType$/;"	g
GateType	cir/cirDefRic.h	/^enum GateType$/;"	g
GateVList	cir/cirDefRic.h	/^typedef vector<CirGateV>           GateVList;$/;"	t
Global_h	sat/Global.h	21;"	d
Hash	util/myHash.h	/^   Hash() : _numBuckets(0), _buckets(0) {}$/;"	f	class:Hash
Hash	util/myHash.h	/^   Hash(size_t b) : _numBuckets(0), _buckets(0) { init(b); }$/;"	f	class:Hash
Hash	util/myHash.h	/^class Hash$/;"	c
HashNode	util/myHash.h	/^typedef pair<HashKey, HashData> HashNode;$/;"	t	class:Hash
Heap	sat/Heap.h	/^    Heap(C c) : comp(c) { heap.push(-1); }$/;"	f	class:Heap
Heap	sat/Heap.h	/^class Heap {$/;"	c
Heap_h	sat/Heap.h	21;"	d
I64_fmt	sat/Global.h	41;"	d
I64_fmt	sat/Global.h	47;"	d
ILLEGAL_IDENTIFIER	cir/cirMgr.cpp	/^   ILLEGAL_IDENTIFIER,$/;"	e	enum:CirParseError	file:
ILLEGAL_NUM	cir/cirMgr.cpp	/^   ILLEGAL_NUM,$/;"	e	enum:CirParseError	file:
ILLEGAL_SYMBOL_NAME	cir/cirMgr.cpp	/^   ILLEGAL_SYMBOL_NAME,$/;"	e	enum:CirParseError	file:
ILLEGAL_SYMBOL_TYPE	cir/cirMgr.cpp	/^   ILLEGAL_SYMBOL_TYPE,$/;"	e	enum:CirParseError	file:
ILLEGAL_WSPACE	cir/cirMgr.cpp	/^   ILLEGAL_WSPACE,$/;"	e	enum:CirParseError	file:
IdList	cir/cirDef.h	/^typedef vector<unsigned>           IdList;$/;"	t
IdList	cir/cirDefRic.h	/^typedef vector<unsigned>           IdList;$/;"	t
Key	sat/Global.h	/^    typedef int Key;$/;"	t	class:vec
L_LIT	sat/Solver.h	211;"	d
L_lit	sat/Solver.h	212;"	d
LessThan_default	sat/Sort.h	/^struct LessThan_default {$/;"	s
Lit	sat/SolverTypes.h	/^    Lit() : x(2*var_Undef) {}   \/\/ (lit_Undef)$/;"	f	class:Lit
Lit	sat/SolverTypes.h	/^    explicit Lit(Var var, bool sgn = false) : x((var+var) + (int)sgn) {}$/;"	f	class:Lit
Lit	sat/SolverTypes.h	/^class Lit {$/;"	c
MAX_LIT_ID	cir/cirMgr.cpp	/^   MAX_LIT_ID,$/;"	e	enum:CirParseError	file:
MISSING_DEF	cir/cirMgr.cpp	/^   MISSING_DEF,$/;"	e	enum:CirParseError	file:
MISSING_IDENTIFIER	cir/cirMgr.cpp	/^   MISSING_IDENTIFIER,$/;"	e	enum:CirParseError	file:
MISSING_NEWLINE	cir/cirMgr.cpp	/^   MISSING_NEWLINE,$/;"	e	enum:CirParseError	file:
MISSING_NUM	cir/cirMgr.cpp	/^   MISSING_NUM,$/;"	e	enum:CirParseError	file:
MISSING_SPACE	cir/cirMgr.cpp	/^   MISSING_SPACE,$/;"	e	enum:CirParseError	file:
MYCLK_TCK	util/myUsage.h	21;"	d
MYCLK_TCK	util/myUsage.h	22;"	d
MY_HASH_H	util/myHash.h	10;"	d
MY_USAGE_H	util/myUsage.h	10;"	d
MyUsage	util/myUsage.h	/^   MyUsage() { reset(); }$/;"	f	class:MyUsage
MyUsage	util/myUsage.h	/^class MyUsage$/;"	c
NEG	cir/cirGate.h	123;"	d
NUM_TOO_BIG	cir/cirMgr.cpp	/^   NUM_TOO_BIG,$/;"	e	enum:CirParseError	file:
NUM_TOO_SMALL	cir/cirMgr.cpp	/^   NUM_TOO_SMALL,$/;"	e	enum:CirParseError	file:
PIGate	cir/cirGate.h	/^	PIGate( unsigned id, unsigned l, unsigned c = 0, string n = "" ) : CirGate( id, l, c, n ){}$/;"	f	class:PIGate
PIGate	cir/cirGate.h	/^class PIGate : public CirGate$/;"	c
PI_GATE	cir/cirDef.h	/^   PI_GATE    = 1,$/;"	e	enum:GateType
PI_GATE	cir/cirDefRic.h	/^   PI_GATE    = 1,$/;"	e	enum:GateType
POGate	cir/cirGate.h	/^	POGate( unsigned id, unsigned l, unsigned c = 0, string n = "" ) : CirGate( id, l, c, n ){}$/;"	f	class:POGate
POGate	cir/cirGate.h	/^class POGate : public CirGate$/;"	c
PO_GATE	cir/cirDef.h	/^   PO_GATE    = 2,$/;"	e	enum:GateType
PO_GATE	cir/cirDefRic.h	/^   PO_GATE    = 2,$/;"	e	enum:GateType
PiArray	cir/cirDefRic.h	/^typedef CirPiGate**                PiArray;$/;"	t
PoArray	cir/cirDefRic.h	/^typedef CirPoGate**                PoArray;$/;"	t
Proof	sat/Proof.cpp	/^Proof::Proof()$/;"	f	class:Proof
Proof	sat/Proof.cpp	/^Proof::Proof(ProofTraverser& t)$/;"	f	class:Proof
Proof	sat/Proof.h	/^class Proof {$/;"	c
ProofTraverser	sat/Proof.h	/^struct ProofTraverser {$/;"	s
Proof_h	sat/Proof.h	21;"	d
PtrV	cir/cirGate.h	/^	PtrV( Gate* g, bool inv = false, bool und = false ) : $/;"	f	class:PtrV
PtrV	cir/cirGate.h	/^class PtrV$/;"	c
READ	sat/File.h	/^enum FileMode { READ, WRITE };$/;"	e	enum:FileMode
REDEF_CONST	cir/cirMgr.cpp	/^   REDEF_CONST,$/;"	e	enum:CirParseError	file:
REDEF_GATE	cir/cirMgr.cpp	/^   REDEF_GATE,$/;"	e	enum:CirParseError	file:
REDEF_SYMBOLIC_NAME	cir/cirMgr.cpp	/^   REDEF_SYMBOLIC_NAME,$/;"	e	enum:CirParseError	file:
RN_GEN_H	util/rnGen.h	9;"	d
RandomNumGen	util/rnGen.h	/^      RandomNumGen() { my_srandom(getpid()); }$/;"	f	class:RandomNumGen
RandomNumGen	util/rnGen.h	/^      RandomNumGen(unsigned seed) { my_srandom(seed); }$/;"	f	class:RandomNumGen
RandomNumGen	util/rnGen.h	/^class RandomNumGen$/;"	c
SAT_H	sat/sat.h	10;"	d
STATIC_ASSERTION_FAILURE	sat/Global.h	/^template <> struct STATIC_ASSERTION_FAILURE<true>{};$/;"	s
SatSolver	sat/sat.h	/^      SatSolver():_solver(0) { }$/;"	f	class:SatSolver
SatSolver	sat/sat.h	/^class SatSolver$/;"	c
SearchParams	sat/Solver.h	/^    SearchParams(double v = 1, double c = 1, double r = 0) : var_decay(v), clause_decay(c), random_var_freq(r) { }$/;"	f	struct:SearchParams
SearchParams	sat/Solver.h	/^struct SearchParams {$/;"	s
SimKey	cir/cirSim.cpp	/^	SimKey( unsigned s ): _simR(s) { $/;"	f	class:SimKey
SimKey	cir/cirSim.cpp	/^class SimKey$/;"	c	file:
Solver	sat/Solver.h	/^    Solver() : ok               (true)$/;"	f	class:Solver
Solver	sat/Solver.h	/^class Solver {$/;"	c
SolverStats	sat/Solver.h	/^    SolverStats() : starts(0), decisions(0), propagations(0), conflicts(0)$/;"	f	struct:SolverStats
SolverStats	sat/Solver.h	/^struct SolverStats {$/;"	s
SolverTypes_h	sat/SolverTypes.h	22;"	d
Solver_h	sat/Solver.h	21;"	d
Sort_h	sat/Sort.h	21;"	d
TEMPLATE_FAIL	sat/Global.h	58;"	d
TOT_GATE	cir/cirDef.h	/^   TOT_GATE$/;"	e	enum:GateType
TOT_GATE	cir/cirDefRic.h	/^   TOT_GATE$/;"	e	enum:GateType
TRA_INT	sat/Proof.h	/^    int             TRA_INT;$/;"	m	class:Proof
TempFiles	sat/Proof.cpp	/^class TempFiles {$/;"	c	file:
UNDEF	cir/cirGate.h	124;"	d
UNDEF_GATE	cir/cirDef.h	/^   UNDEF_GATE = 0,$/;"	e	enum:GateType
UNDEF_GATE	cir/cirDefRic.h	/^   UNDEF_GATE = 0,$/;"	e	enum:GateType
UTIL_H	util/util.h	9;"	d
UndefGate	cir/cirGate.h	/^	UndefGate( unsigned id ) :$/;"	f	class:UndefGate
UndefGate	cir/cirGate.h	/^class UndefGate : public CirGate$/;"	c
Var	sat/SolverTypes.h	/^typedef int Var;$/;"	t
VarOrder	sat/VarOrder.h	/^    VarOrder(const vec<char>& ass, const vec<double>& act) :$/;"	f	class:VarOrder
VarOrder	sat/VarOrder.h	/^class VarOrder {$/;"	c
VarOrder_h	sat/VarOrder.h	21;"	d
VarOrder_lt	sat/VarOrder.h	/^    VarOrder_lt(const vec<double>&  act) : activity(act) { }$/;"	f	struct:VarOrder_lt
VarOrder_lt	sat/VarOrder.h	/^struct VarOrder_lt {$/;"	s
WRITE	sat/File.h	/^enum FileMode { READ, WRITE };$/;"	e	enum:FileMode
_Aigs	cir/cirMgr.h	/^   vector<AigGate> _Aigs;$/;"	m	class:CirMgr
_AllList	cir/cirMgr.h	/^   vector<CirGate*> _AllList;$/;"	m	class:CirMgr
_Const0s	cir/cirMgr.h	/^   vector<Const0Gate> _Const0s;$/;"	m	class:CirMgr
_DFSList	cir/cirMgr.h	/^   vector<CirGate*> _DFSList;$/;"	m	class:CirMgr
_FloatingList	cir/cirMgr.h	/^   IdList _FloatingList;$/;"	m	class:CirMgr
_PIs	cir/cirMgr.h	/^   vector<PIGate> _PIs;$/;"	m	class:CirMgr
_POs	cir/cirMgr.h	/^   vector<POGate> _POs;$/;"	m	class:CirMgr
_Undefs	cir/cirMgr.h	/^   vector<UndefGate> _Undefs;$/;"	m	class:CirMgr
_UnusedList	cir/cirMgr.h	/^   IdList _UnusedList;$/;"	m	class:CirMgr
__SGI_STL_INTERNAL_RELOPS	sat/Global.h	265;"	d
_aigInDfsNum	cir/cirMgr.h	/^   unsigned _aigInDfsNum;$/;"	m	class:CirMgr
_aigNum	cir/cirMgr.h	/^   unsigned _aigNum;$/;"	m	class:CirMgr
_assump	sat/sat.h	/^      vec<Lit>          _assump;    \/\/ Assumption List for assumption solve$/;"	m	class:SatSolver
_bucketNum	util/myHash.h	/^	 size_t _bucketNum;$/;"	m	class:Hash::iterator
_buckets	util/myHash.h	/^   vector<HashNode>*        _buckets;$/;"	m	class:Hash
_cache	util/myHash.h	/^   CacheNode*     _cache;$/;"	m	class:Cache
_colNo	cir/cirGate.h	/^   unsigned _colNo;$/;"	m	class:CirGate
_curVar	sat/sat.h	/^      Var               _curVar;    \/\/ Variable currently$/;"	m	class:SatSolver
_currentMem	util/myUsage.h	/^   double     _currentMem;$/;"	m	class:MyUsage
_currentTick	util/myUsage.h	/^   double     _currentTick;$/;"	m	class:MyUsage
_fanins	cir/cirFraig.cpp	/^   vector< PtrV<CirGate> > _fanins;$/;"	m	class:AigashKey	file:
_fanins	cir/cirGate.h	/^   vector< PtrV<CirGate> > _fanins;$/;"	m	class:CirGate
_fanouts	cir/cirGate.h	/^   vector< PtrV<CirGate> > _fanouts;$/;"	m	class:CirGate
_fecGrps	cir/cirMgr.h	/^   vector< IdList* > _fecGrps;$/;"	m	class:CirMgr
_globalRef	cir/cirGate.cpp	/^unsigned CirGate::_globalRef = 0;$/;"	m	class:CirGate	file:
_globalRef	cir/cirGate.h	/^   static unsigned _globalRef;$/;"	m	class:CirGate
_hash	util/myHash.h	/^	 const Hash* _hash;$/;"	m	class:Hash::iterator
_id	cir/cirGate.h	/^   unsigned _id;$/;"	m	class:CirGate
_initMem	util/myUsage.h	/^   double     _initMem;$/;"	m	class:MyUsage
_latNum	cir/cirMgr.h	/^   unsigned _latNum;$/;"	m	class:CirMgr
_lineNo	cir/cirGate.h	/^   unsigned _lineNo;$/;"	m	class:CirGate
_mask	cir/cirSim.cpp	/^	static const unsigned _mask = 1;$/;"	m	class:SimKey	file:
_maxId	cir/cirMgr.h	/^   unsigned _maxId;$/;"	m	class:CirMgr
_name	cir/cirGate.h	/^   string _name;$/;"	m	class:CirGate
_num	util/myHash.h	/^	 size_t _num;$/;"	m	class:Hash::iterator
_numBuckets	util/myHash.h	/^   size_t                   _numBuckets;$/;"	m	class:Hash
_periodUsedTime	util/myUsage.h	/^   double     _periodUsedTime;$/;"	m	class:MyUsage
_piNum	cir/cirMgr.h	/^   unsigned _piNum;$/;"	m	class:CirMgr
_poNum	cir/cirMgr.h	/^   unsigned _poNum;$/;"	m	class:CirMgr
_ptrV	cir/cirGate.h	/^	size_t _ptrV;$/;"	m	class:PtrV
_ref	cir/cirGate.h	/^   mutable unsigned _ref;$/;"	m	class:CirGate
_satVar	cir/cirGate.h	/^   int _satVar;$/;"	m	class:CirGate
_simLog	cir/cirMgr.h	/^   ofstream *_simLog;$/;"	m	class:CirMgr
_simR	cir/cirSim.cpp	/^	unsigned _simR;$/;"	m	class:SimKey	file:
_simResult	cir/cirGate.h	/^   unsigned _simResult;$/;"	m	class:CirGate
_simmed	cir/cirMgr.h	/^   bool _simmed;$/;"	m	class:CirMgr
_size	util/myHash.h	/^   size_t         _size;$/;"	m	class:Cache
_solver	sat/sat.h	/^      Solver           *_solver;    \/\/ Pointer to a Minisat solver$/;"	m	class:SatSolver
_totalUsedTime	util/myUsage.h	/^   double     _totalUsedTime;$/;"	m	class:MyUsage
_typeStr	cir/cirGate.cpp	/^const string AigGate::_typeStr = "AIG";$/;"	m	class:AigGate	file:
_typeStr	cir/cirGate.cpp	/^const string Const0Gate::_typeStr = "CONST";$/;"	m	class:Const0Gate	file:
_typeStr	cir/cirGate.cpp	/^const string PIGate::_typeStr = "PI";$/;"	m	class:PIGate	file:
_typeStr	cir/cirGate.cpp	/^const string POGate::_typeStr = "PO";$/;"	m	class:POGate	file:
_typeStr	cir/cirGate.cpp	/^const string UndefGate::_typeStr = "UNDEF";$/;"	m	class:UndefGate	file:
_typeStr	cir/cirGate.h	/^	static const string _typeStr;$/;"	m	class:AigGate
_typeStr	cir/cirGate.h	/^	static const string _typeStr;$/;"	m	class:Const0Gate
_typeStr	cir/cirGate.h	/^	static const string _typeStr;$/;"	m	class:PIGate
_typeStr	cir/cirGate.h	/^	static const string _typeStr;$/;"	m	class:POGate
_typeStr	cir/cirGate.h	/^	static const string _typeStr;$/;"	m	class:UndefGate
activity	sat/Solver.h	/^    vec<double>         activity;         \/\/ A heuristic measurement of the activity of a variable.$/;"	m	class:Solver
activity	sat/SolverTypes.h	/^    float&    activity    ()      const {$/;"	f	class:Clause
activity	sat/VarOrder.h	/^    const vec<double>&  activity;    \/\/ var->act. Pointer to external activity table.$/;"	m	class:VarOrder
activity	sat/VarOrder.h	/^    const vec<double>&  activity;$/;"	m	struct:VarOrder_lt
addAigCNF	sat/sat.h	/^      void addAigCNF(Var vf, Var va, bool fa, Var vb, bool fb) {$/;"	f	class:SatSolver
addBinary	sat/Solver.h	/^    void    addBinary (Lit p, Lit q)        { addBinary_tmp [0] = p; addBinary_tmp [1] = q; addClause(addBinary_tmp); }$/;"	f	class:Solver
addBinary_tmp	sat/Solver.h	/^    vec<Lit>            addBinary_tmp;$/;"	m	class:Solver
addClause	sat/Solver.h	/^    void    addClause (const vec<Lit>& ps , bool A = true)  { newClause(ps , false , ClauseId_NULL , A); }  $/;"	f	class:Solver
addFanin	cir/cirGate.cpp	/^CirGate::addFanin( CirGate* gate, bool isInv, bool isUndef )$/;"	f	class:CirGate
addFanout	cir/cirGate.cpp	/^CirGate::addFanout( CirGate* gate, bool isInv, bool isUndef )$/;"	f	class:CirGate
addGateToFec	cir/cirFraig.cpp	/^CirMgr::addGateToFec( unsigned f, unsigned g )$/;"	f	class:CirMgr
addGateToLastFec	cir/cirFraig.cpp	/^CirMgr::addGateToLastFec( unsigned gid )$/;"	f	class:CirMgr
addRoot	sat/Proof.cpp	/^ClauseId Proof::addRoot(vec<Lit>& cl, bool A)$/;"	f	class:Proof
addTernary	sat/Solver.h	/^    void    addTernary(Lit p, Lit q, Lit r) { addTernary_tmp[0] = p; addTernary_tmp[1] = q; addTernary_tmp[2] = r; addClause(addTernary_tmp); }$/;"	f	class:Solver
addTernary_tmp	sat/Solver.h	/^    vec<Lit>            addTernary_tmp;$/;"	m	class:Solver
addUnit	sat/Solver.h	/^    void    addUnit   (Lit p)               { addUnit_tmp   [0] = p; addClause(addUnit_tmp); }$/;"	f	class:Solver
addUnit_tmp	sat/Solver.h	/^    vec<Lit>            addUnit_tmp;$/;"	m	class:Solver
addXorCNF	sat/sat.h	/^      void addXorCNF(Var vf, Var va, bool fa, Var vb, bool fb) {$/;"	f	class:SatSolver
analyze	sat/Solver.cpp	/^void Solver::analyze(Clause* confl, vec<Lit>& out_learnt, int& out_btlevel)$/;"	f	class:Solver
analyzeFinal	sat/Solver.cpp	/^void Solver::analyzeFinal(Clause* confl, bool skip_first)$/;"	f	class:Solver
analyze_removable	sat/Solver.cpp	/^bool Solver::analyze_removable(Lit p, uint min_level)$/;"	f	class:Solver
analyze_seen	sat/Solver.h	/^    vec<char>           analyze_seen;$/;"	m	class:Solver
analyze_stack	sat/Solver.h	/^    vec<Lit>            analyze_stack;$/;"	m	class:Solver
analyze_tmpbin	sat/Solver.h	/^    Clause*             analyze_tmpbin;$/;"	m	class:Solver
analyze_toclear	sat/Solver.h	/^    vec<Lit>            analyze_toclear;$/;"	m	class:Solver
assertProperty	sat/sat.h	/^      void assertProperty(Var prop, bool val) {$/;"	f	class:SatSolver
assigns	sat/Solver.h	/^    vec<char>           assigns;          \/\/ The current assignments (lbool:s stored as char:s).$/;"	m	class:Solver
assigns	sat/VarOrder.h	/^    const vec<char>&    assigns;     \/\/ var->val. Pointer to external assignment table.$/;"	m	class:VarOrder
assume	sat/Solver.cpp	/^bool Solver::assume(Lit p) {$/;"	f	class:Solver
assumeProperty	sat/sat.h	/^      void assumeProperty(Var prop, bool val) {$/;"	f	class:SatSolver
assumeRelease	sat/sat.h	/^      void assumeRelease() { _assump.clear(); }$/;"	f	class:SatSolver
assumpSolve	sat/sat.h	/^      bool assumpSolve() { return _solver->solve(_assump); }$/;"	f	class:SatSolver
begin	util/myHash.h	/^   iterator begin() const { $/;"	f	class:Hash
beginChain	sat/Proof.cpp	/^void Proof::beginChain(ClauseId start)$/;"	f	class:Proof
bucketNum	util/myHash.h	/^   size_t bucketNum(const HashKey& k) const {$/;"	f	class:Hash
buf	cir/cirMgr.cpp	/^static char buf[1024];$/;"	v	file:
buf	sat/File.h	/^    uchar*      buf;        \/\/ Read or write buffer.$/;"	m	class:File
cancelUntil	sat/Solver.cpp	/^void Solver::cancelUntil(int level) {$/;"	f	class:Solver
cap	sat/Global.h	/^    int cap;$/;"	m	class:vec
capacity	sat/Global.h	/^    void     capacity (int size) { grow(size); }$/;"	f	class:vec
cchar	sat/Global.h	/^typedef const char    cchar;$/;"	t
chain_id	sat/Proof.h	/^    vec<ClauseId>   chain_id;$/;"	m	class:Proof
chain_lit	sat/Proof.h	/^    vec<Lit>        chain_lit;$/;"	m	class:Proof
check	sat/Solver.h	/^inline void check(bool expr) { assert(expr); }$/;"	f
check	util/myHash.h	/^   bool check(const HashKey& k, HashData& n) { $/;"	f	class:Hash
checkEqv	cir/cirFraig.cpp	/^CirMgr::checkEqv( SatSolver& s, unsigned a, unsigned b, bool isInv ) const$/;"	f	class:CirMgr
checkFec	cir/cirGate.h	/^   bool checkFec( unsigned& fi ) {$/;"	f	class:CirGate
checkMem	util/myUsage.h	/^   double checkMem() const {$/;"	f	class:MyUsage
checkTick	util/myUsage.h	/^   double checkTick() const {$/;"	f	class:MyUsage
claBumpActivity	sat/Solver.h	/^    void     claBumpActivity (Clause* c) { if ( (c->activity() += cla_inc) > 1e20 ) claRescaleActivity(); }$/;"	f	class:Solver
claDecayActivity	sat/Solver.h	/^    void     claDecayActivity  () { cla_inc *= cla_decay; }$/;"	f	class:Solver
claRescaleActivity	sat/Solver.cpp	/^void Solver::claRescaleActivity()$/;"	f	class:Solver
cla_decay	sat/Solver.h	/^    double              cla_decay;        \/\/ INVERSE decay factor for clause activity: stores 1\/decay.$/;"	m	class:Solver
cla_inc	sat/Solver.h	/^    double              cla_inc;          \/\/ Amount to bump next clause with.$/;"	m	class:Solver
clause	sat/Proof.h	/^    vec<Lit>        clause;$/;"	m	class:Proof
clause	sat/SolverTypes.h	/^    Clause*     clause   () const { return (Clause*)data; }$/;"	f	class:GClause
clause_decay	sat/Solver.h	/^    double  var_decay, clause_decay, random_var_freq;    \/\/ (reasonable values are: 0.95, 0.999, 0.02)    $/;"	m	struct:SearchParams
clauses	sat/Solver.h	/^    vec<Clause*>        clauses;          \/\/ List of problem clauses.$/;"	m	class:Solver
clauses_literals	sat/Solver.h	/^    int64   clauses_literals, learnts_literals, max_literals, tot_literals;$/;"	m	struct:SolverStats
cleanDeadFECs	cir/cirMgr.cpp	/^CirMgr::cleanDeadFECs()$/;"	f	class:CirMgr
cleanDeadFloating	cir/cirMgr.cpp	/^CirMgr::cleanDeadFloating()$/;"	f	class:CirMgr
cleanLists	cir/cirMgr.cpp	/^CirMgr::cleanLists()$/;"	f	class:CirMgr
clear	sat/Global.h	/^void vec<T>::clear(bool dealloc) {$/;"	f	class:vec
clearFec	cir/cirGate.h	/^   void clearFec() {$/;"	f	class:CirGate
clearList	util/util.h	/^void clearList(T& l)$/;"	f
close	sat/File.cpp	/^void File::close(void)$/;"	f	class:File
colNo	cir/cirMgr.cpp	/^static unsigned colNo  = 0;  \/\/ in printing, colNo needs to ++$/;"	v	file:
comp	sat/Heap.h	/^    C        comp;$/;"	m	class:Heap
compress	sat/Proof.cpp	/^void Proof::compress(Proof& dst, ClauseId goal)$/;"	f	class:Proof
conflict	sat/Solver.h	/^    vec<Lit>    conflict;           \/\/ If problem is unsatisfiable under assumptions, this vector represent the conflict clause expressed in the assumptions.$/;"	m	class:Solver
conflict_id	sat/Solver.h	/^    ClauseId    conflict_id;        \/\/ (In proof logging mode only.) ID for the clause 'conflict' (for proof traverseral). NOTE! The empty clause is always the last clause derived, but for conflicts under assumption, this is not necessarly true.$/;"	m	class:Solver
conflicts	sat/Solver.h	/^    int64   starts, decisions, propagations, conflicts;$/;"	m	struct:SolverStats
copyTo	sat/Global.h	/^    void copyTo(vec<T>& copy) const { copy.clear(); copy.growTo(sz); for (int i = 0; i < sz; i++) new (&copy[i]) T(data[i]); }$/;"	f	class:vec
cpuTime	sat/Global.h	/^static inline double cpuTime(void) {$/;"	f
curCmd	cir/cirCmd.cpp	/^static CirCmdState curCmd = CIRINIT;$/;"	v	file:
data	sat/Global.h	/^    T*  data;$/;"	m	class:vec
data	sat/SolverTypes.h	/^    Lit     data[1];$/;"	m	class:Clause
data	sat/SolverTypes.h	/^    void*   data;$/;"	m	class:GClause
decisionLevel	sat/Solver.h	/^    int      decisionLevel() const { return trail_lim.size(); }$/;"	f	class:Solver
decisions	sat/Solver.h	/^    int64   starts, decisions, propagations, conflicts;$/;"	m	struct:SolverStats
decode64	sat/File.h	/^static inline int64  decode64(uint64 val)           { return ((val & 1) == 0) ? (int64)(val >> 1) : ~(int64)(val >> 1); }$/;"	f
default_params	sat/Solver.h	/^    SearchParams    default_params;     \/\/ Restart frequency etc.$/;"	m	class:Solver
deleted	sat/Proof.cpp	/^void Proof::deleted(ClauseId gone)$/;"	f	class:Proof
deleted	sat/Proof.h	/^    virtual void deleted(ClauseId c){}$/;"	f	struct:ProofTraverser
dfsPost	cir/cirGate.cpp	/^CirGate::dfsPost( vector<CirGate*>& dfsList )$/;"	f	class:CirGate
dfsPost	cir/cirGate.cpp	/^UndefGate::dfsPost( vector<CirGate*>& dfsList ) {}$/;"	f	class:UndefGate
dfsTraversal	cir/cirMgr.cpp	/^CirMgr::dfsTraversal()$/;"	f	class:CirMgr
drand	sat/Global.h	/^static inline double drand(double& seed) {$/;"	f
empty	sat/Heap.h	/^    bool empty     ()         { return heap.size() == 1; }$/;"	f	class:Heap
empty	util/myHash.h	/^   bool empty() const { $/;"	f	class:Hash
encode64	sat/File.h	/^static inline uint64 encode64(int64  val)           { return (val >= 0) ? (uint64)val << 1 : (((uint64)(~val) << 1) | 1); }$/;"	f
end	util/myHash.h	/^   iterator end() const {$/;"	f	class:Hash
endChain	sat/Proof.cpp	/^ClauseId Proof::endChain()$/;"	f	class:Proof
enqueue	sat/Solver.cpp	/^bool Solver::enqueue(Lit p, Clause* from)$/;"	f	class:Solver
eof	sat/File.h	/^    bool eof(void) {$/;"	f	class:File
eraseFanin	cir/cirGate.cpp	/^CirGate::eraseFanin( CirGate* g )$/;"	f	class:CirGate
eraseFanin	cir/cirGate.cpp	/^CirGate::eraseFanin( PtrV<CirGate> gV )$/;"	f	class:CirGate
eraseFanout	cir/cirGate.cpp	/^CirGate::eraseFanout( CirGate* g )$/;"	f	class:CirGate
eraseFanout	cir/cirGate.cpp	/^CirGate::eraseFanout( PtrV<CirGate> gV )$/;"	f	class:CirGate
eraseNoOrder	cir/cirMgr.h	/^void eraseNoOrder( vector<T>& arr, unsigned id )$/;"	f
errGate	cir/cirMgr.cpp	/^static CirGate *errGate;$/;"	v	file:
errInt	cir/cirMgr.cpp	/^static int errInt;$/;"	v	file:
errMsg	cir/cirMgr.cpp	/^static string errMsg;$/;"	v	file:
exec	cir/cirCmd.cpp	/^CirFraigCmd::exec(const string& option)$/;"	f	class:CirFraigCmd
exec	cir/cirCmd.cpp	/^CirGateCmd::exec(const string& option)$/;"	f	class:CirGateCmd
exec	cir/cirCmd.cpp	/^CirOptCmd::exec(const string& option)$/;"	f	class:CirOptCmd
exec	cir/cirCmd.cpp	/^CirPrintCmd::exec(const string& option)$/;"	f	class:CirPrintCmd
exec	cir/cirCmd.cpp	/^CirReadCmd::exec(const string& option)$/;"	f	class:CirReadCmd
exec	cir/cirCmd.cpp	/^CirSimCmd::exec(const string& option)$/;"	f	class:CirSimCmd
exec	cir/cirCmd.cpp	/^CirStrashCmd::exec(const string& option)$/;"	f	class:CirStrashCmd
exec	cir/cirCmd.cpp	/^CirSweepCmd::exec(const string& option)$/;"	f	class:CirSweepCmd
exec	cir/cirCmd.cpp	/^CirWriteCmd::exec(const string& option)$/;"	f	class:CirWriteCmd
expensive_ccmin	sat/Solver.h	/^    int             expensive_ccmin;    \/\/ Controls conflict clause minimization. TRUE by default.$/;"	m	class:Solver
fd	sat/File.h	/^    int         fd;         \/\/ Underlying file descriptor.$/;"	m	class:File
fileSim	cir/cirSim.cpp	/^CirMgr::fileSim(ifstream& patternFile)$/;"	f	class:CirMgr
files	sat/Proof.cpp	/^    vec<cchar*> files;      \/\/ For clean-up purposed on abnormal exit.$/;"	m	class:TempFiles	file:
flush	sat/File.h	/^    void flush(void) {$/;"	f	class:File
forceInsert	util/myHash.h	/^   void forceInsert(const HashKey& k, const HashData& d) { $/;"	f	class:Hash
fp	sat/Proof.h	/^    File            fp;$/;"	m	class:Proof
fp_name	sat/Proof.h	/^    cchar*          fp_name;$/;"	m	class:Proof
fpos	sat/Proof.h	/^    int64           fpos;$/;"	m	class:Proof
fraig	cir/cirFraig.cpp	/^CirMgr::fraig()$/;"	f	class:CirMgr
fraigBFS	cir/cirFraig.cpp	/^CirMgr::fraigBFS()$/;"	f	class:CirMgr
fraigByDFS	cir/cirFraig.cpp	/^CirMgr::fraigByDFS()$/;"	f	class:CirMgr
gateFuneral	cir/cirMgr.cpp	/^CirMgr::gateFuneral( unsigned dead )$/;"	f	class:CirMgr
gateIdComp	cir/cirMgr.cpp	/^bool gateIdComp( const CirGate* a, const CirGate* b )$/;"	f
genProofModel	cir/cirFraig.cpp	/^CirMgr::genProofModel( SatSolver& s ) $/;"	f	class:CirMgr
getChar	sat/File.h	/^    int getChar(void) {$/;"	f	class:File
getCharQ	sat/File.h	/^    int getCharQ(void) {            \/\/ Quick version with minimal overhead -- don't call this in the wrong mode!$/;"	f	class:File
getFanins	cir/cirGate.h	/^   const vector< PtrV<CirGate> >& getFanins() const { return _fanins; }$/;"	f	class:CirGate
getFanouts	cir/cirGate.h	/^   const vector< PtrV<CirGate> >& getFanouts() const { return _fanouts; }$/;"	f	class:CirGate
getFecGrp	cir/cirMgr.h	/^   const IdList* getFecGrp( unsigned i ) const {$/;"	f	class:CirMgr
getGate	cir/cirMgr.h	/^   CirGate* getGate(unsigned gid) const {       $/;"	f	class:CirMgr
getHashSize	util/util.cpp	/^size_t getHashSize(size_t s) {$/;"	f
getId	cir/cirGate.h	/^   unsigned getId() const { return _id; }$/;"	f	class:CirGate
getInt	sat/File.h	/^static inline uint64 getInt  (File& in)             { return decode64(getUInt(in)); }$/;"	f
getLineNo	cir/cirGate.h	/^   unsigned getLineNo() const { return _lineNo; }$/;"	f	class:CirGate
getMode	sat/File.h	/^    FileMode getMode(void) {$/;"	f	class:File
getName	cir/cirGate.h	/^   string getName() const { return _name; }$/;"	f	class:CirGate
getSimResult	cir/cirGate.h	/^   unsigned getSimResult() const { return _simResult; }$/;"	f	class:CirGate
getTypeStr	cir/cirGate.h	/^	virtual string getTypeStr() const { return PIGate::_typeStr; }$/;"	f	class:PIGate
getTypeStr	cir/cirGate.h	/^	virtual string getTypeStr() const { return POGate::_typeStr; }$/;"	f	class:POGate
getTypeStr	cir/cirGate.h	/^	virtual string getTypeStr() const { return UndefGate::_typeStr; }$/;"	f	class:UndefGate
getTypeStr	cir/cirGate.h	/^	virtual string getTypeStr() const { return _typeStr; }$/;"	f	class:AigGate
getTypeStr	cir/cirGate.h	/^	virtual string getTypeStr() const{ return Const0Gate::_typeStr; }$/;"	f	class:Const0Gate
getUInt	sat/File.cpp	/^uint64 getUInt(File& in)$/;"	f
getValue	sat/sat.h	/^      int getValue(Var v) const {$/;"	f	class:SatSolver
getVar	cir/cirGate.h	/^   int getVar() const { return _satVar; }$/;"	f	class:CirGate
getmin	sat/Heap.h	/^    int  getmin() {$/;"	f	class:Heap
grow	sat/Global.h	/^void vec<T>::grow(int min_cap) {$/;"	f	class:vec
growTo	sat/Global.h	/^void vec<T>::growTo(int size) {$/;"	f	class:vec
growTo	sat/Global.h	/^void vec<T>::growTo(int size, const T& pad) {$/;"	f	class:vec
hasFec	cir/cirGate.h	/^   bool hasFec() { return bool( _hasFec ); }$/;"	f	class:CirGate
hash	sat/SolverTypes.h	/^    uint hash() const { return (uint)x; }$/;"	f	class:Lit
heap	sat/Heap.h	/^    vec<int> heap;     \/\/ heap of ints$/;"	m	class:Heap
heap	sat/VarOrder.h	/^    Heap<VarOrder_lt>   heap;$/;"	m	class:VarOrder
heapProperty	sat/Heap.h	/^    bool heapProperty() {$/;"	f	class:Heap
heapProperty	sat/Heap.h	/^    bool heapProperty(int i) {$/;"	f	class:Heap
help	cir/cirCmd.cpp	/^CirFraigCmd::help() const$/;"	f	class:CirFraigCmd
help	cir/cirCmd.cpp	/^CirGateCmd::help() const$/;"	f	class:CirGateCmd
help	cir/cirCmd.cpp	/^CirOptCmd::help() const$/;"	f	class:CirOptCmd
help	cir/cirCmd.cpp	/^CirPrintCmd::help() const$/;"	f	class:CirPrintCmd
help	cir/cirCmd.cpp	/^CirReadCmd::help() const$/;"	f	class:CirReadCmd
help	cir/cirCmd.cpp	/^CirSimCmd::help() const$/;"	f	class:CirSimCmd
help	cir/cirCmd.cpp	/^CirStrashCmd::help() const$/;"	f	class:CirStrashCmd
help	cir/cirCmd.cpp	/^CirSweepCmd::help() const$/;"	f	class:CirSweepCmd
help	cir/cirCmd.cpp	/^CirWriteCmd::help() const$/;"	f	class:CirWriteCmd
id	sat/SolverTypes.h	/^    ClauseId& id          ()      const { return *((ClauseId*)&data[size() + (int)learnt()]); }$/;"	f	class:Clause
id	sat/SolverTypes.h	/^inline Lit  id    (Lit p, bool sgn) { Lit q; q.x = p.x ^ (int)sgn; return q; }$/;"	f
id_counter	sat/Proof.h	/^    ClauseId        id_counter;$/;"	m	class:Proof
inHeap	sat/Heap.h	/^    bool inHeap    (int n)    { assert(ok(n)); return indices[n] != 0; }$/;"	f	class:Heap
increase	sat/Heap.h	/^    void increase  (int n)    { assert(ok(n)); assert(inHeap(n)); percolateUp(indices[n]); }$/;"	f	class:Heap
index	sat/SolverTypes.h	/^inline int  index (Lit p) { return p.x; }                \/\/ A "toInt" method that guarantees small, positive integers suitable for array indexing.$/;"	f
indices	sat/Heap.h	/^    vec<int> indices;  \/\/ int -> index in heap$/;"	m	class:Heap
init	util/myHash.h	/^   void init(size_t b) { $/;"	f	class:Hash
init	util/myHash.h	/^   void init(size_t s) { }$/;"	f	class:Cache
initCirCmd	cir/cirCmd.cpp	/^initCirCmd()$/;"	f
initFECs	cir/cirSim.cpp	/^CirMgr::initFECs()$/;"	f	class:CirMgr
initPIs	cir/cirSim.cpp	/^CirMgr::initPIs( vector<unsigned>& inputs )$/;"	f	class:CirMgr
initSim	cir/cirGate.h	/^	void initSim( unsigned s ) { _simResult = s; }$/;"	f	class:PIGate
initialize	sat/sat.h	/^      void initialize() {$/;"	f	class:SatSolver
insert	sat/Heap.h	/^    void insert(int n) {$/;"	f	class:Heap
insert	util/myHash.h	/^   bool insert(const HashKey& k, const HashData& d) { $/;"	f	class:Hash
int64	sat/Global.h	/^typedef INT64              int64;$/;"	t
int64	sat/Global.h	/^typedef long long          int64;$/;"	t
intp	sat/Global.h	/^typedef INT_PTR            intp;$/;"	t
intp	sat/Global.h	/^typedef __PTRDIFF_TYPE__   intp;$/;"	t
inv	cir/cirGate.h	/^	PtrV<Gate> inv() { $/;"	f	class:PtrV
irand	sat/Global.h	/^static inline int irand(double& seed, int size) {$/;"	f
isGlobalRef	cir/cirGate.h	/^   bool isGlobalRef() const { return (_ref == _globalRef); }$/;"	f	class:CirGate
isInv	cir/cirGate.h	/^	bool isInv() const {$/;"	f	class:PtrV
isLit	sat/SolverTypes.h	/^    bool        isLit    () const { return ((uintp)data & 1) == 1; }$/;"	f	class:GClause
isUndef	cir/cirGate.h	/^	bool isUndef() const {$/;"	f	class:PtrV
isValidVarName	util/myString.cpp	/^isValidVarName(const string& str)$/;"	f
iterator	util/myHash.h	/^	  iterator( const Hash* h, size_t b, size_t n ) : $/;"	f	class:Hash::iterator
iterator	util/myHash.h	/^      iterator() : _hash(0), _bucketNum(0), _num(0) {}$/;"	f	class:Hash::iterator
iterator	util/myHash.h	/^   class iterator$/;"	c	class:Hash
judgeFecDeath	cir/cirFraig.cpp	/^CirMgr::judgeFecDeath( unsigned f )$/;"	f	class:CirMgr
justSim	cir/cirSim.cpp	/^CirMgr::justSim()$/;"	f	class:CirMgr
kickGateFromFec	cir/cirFraig.cpp	/^CirMgr::kickGateFromFec( unsigned f, unsigned num )$/;"	f	class:CirMgr
killFecGrp	cir/cirFraig.cpp	/^CirMgr::killFecGrp( unsigned fid )$/;"	f	class:CirMgr
l_False	sat/Global.h	/^const lbool l_False = toLbool(-1);$/;"	v
l_True	sat/Global.h	/^const lbool l_True  = toLbool( 1);$/;"	v
l_Undef	sat/Global.h	/^const lbool l_Undef = toLbool( 0);$/;"	v
last	sat/Global.h	/^    T&       last  (void)              { return data[sz-1]; }$/;"	f	class:vec
last	sat/Global.h	/^    const T& last  (void) const        { return data[sz-1]; }$/;"	f	class:vec
last	sat/Proof.h	/^    ClauseId last      () { assert(id_counter != ClauseId_NULL); return id_counter - 1; }$/;"	f	class:Proof
lastToFirst_lt	sat/Solver.cpp	/^    lastToFirst_lt(const vec<int>& t) : trail_pos(t) {}$/;"	f	class:lastToFirst_lt
lastToFirst_lt	sat/Solver.cpp	/^class lastToFirst_lt {  \/\/ Helper class to 'analyze' -- order literals from last to first occurance in 'trail[]'.$/;"	c	file:
lbool	sat/Global.h	/^    explicit lbool(int v) : value(v) { }$/;"	f	class:lbool
lbool	sat/Global.h	/^    lbool()       : value(0) { }$/;"	f	class:lbool
lbool	sat/Global.h	/^    lbool(bool x) : value((int)x*2-1) { }$/;"	f	class:lbool
lbool	sat/Global.h	/^class lbool {$/;"	c
learnt	sat/SolverTypes.h	/^    bool      learnt      ()      const { return size_learnt & 1; }$/;"	f	class:Clause
learnts	sat/Solver.h	/^    vec<Clause*>        learnts;          \/\/ List of learnt clauses.$/;"	m	class:Solver
learnts_literals	sat/Solver.h	/^    int64   clauses_literals, learnts_literals, max_literals, tot_literals;$/;"	m	struct:SolverStats
left	sat/Heap.h	/^static inline int left  (int i) { return i+i; }$/;"	f
level	sat/Solver.h	/^    vec<int>            level;            \/\/ 'level[var]' is the decision level at which assignment was made.$/;"	m	class:Solver
lineNo	cir/cirMgr.cpp	/^static unsigned lineNo = 0;  \/\/ in printint, lineNo needs to ++$/;"	v	file:
lit	sat/SolverTypes.h	/^    Lit         lit      () const { return toLit(((intp)data) >> 1); }$/;"	f	class:GClause
lit2ptrV	cir/cirMgr.cpp	/^CirMgr::lit2ptrV( unsigned litId ) const$/;"	f	class:CirMgr
locatePtr	cir/cirGate.cpp	/^bool locatePtr( const vector< PtrV<G> >& arr, G* const g, unsigned & pos, unsigned start = 0 )$/;"	f
locateUnused	cir/cirMgr.cpp	/^CirMgr::locateUnused()$/;"	f	class:CirMgr
locked	sat/Solver.h	/^    bool     locked          (const Clause* c) const { return reason[var((*c)[0])] == c; }$/;"	f	class:Solver
lseek64	sat/File.h	13;"	d
main	main/main.cpp	/^main(int argc, char** argv)$/;"	f
max	sat/Global.h	/^template<class T> static inline T max(T x, T y) { return (x > y) ? x : y; }$/;"	f
maxFail	cir/cirSim.cpp	/^CirMgr::maxFail()$/;"	f	class:CirMgr
max_literals	sat/Solver.h	/^    int64   clauses_literals, learnts_literals, max_literals, tot_literals;$/;"	m	struct:SolverStats
memReadStat	sat/Global.h	/^static inline int memReadStat(int field)$/;"	f
memUsed	sat/Global.h	/^static inline int64 memUsed() { return (int64)memReadStat(0) * (int64)getpagesize(); }$/;"	f
memUsed	sat/Global.h	/^static inline int64 memUsed() {$/;"	f
merge	cir/cirGate.cpp	/^CirGate::merge( CirGate* g )$/;"	f	class:CirGate
merge	cir/cirGate.h	/^	virtual void merge( CirGate* g ) {}$/;"	f	class:POGate
mergeEqvGates	cir/cirFraig.cpp	/^CirMgr::mergeEqvGates( unsigned persist, unsigned dying )$/;"	f	class:CirMgr
mergeStrashGates	cir/cirFraig.cpp	/^CirMgr::mergeStrashGates( CirGate* persistG, CirGate* dyingG )$/;"	f	class:CirMgr
min	sat/Global.h	/^template<class T> static inline T min(T x, T y) { return (x < y) ? x : y; }$/;"	f
mode	sat/File.h	/^    FileMode    mode;       \/\/ Reading or writing.$/;"	m	class:File
model	sat/Solver.h	/^    vec<lbool>  model;              \/\/ If problem is satisfiable, this vector contains the model (if any).$/;"	m	class:Solver
modelValue	sat/Solver.h	/^    lbool   modelValue(Var x) const { return model[x]; }$/;"	f	class:Solver
moveTo	sat/Global.h	/^    void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }$/;"	f	class:vec
myGetChar	util/myGetChar.cpp	/^char myGetChar()$/;"	f
myGetChar	util/myGetChar.cpp	/^char myGetChar(istream& istr)$/;"	f
myStr2Int	util/myString.cpp	/^myStr2Int(const string& str, int& num)$/;"	f
myStrGetTok	util/myString.cpp	/^myStrGetTok(const string& str, string& tok, size_t pos = 0,$/;"	f
myStrNCmp	util/myString.cpp	/^myStrNCmp(const string& s1, const string& s2, unsigned n)$/;"	f
myUsage	util/util.cpp	/^MyUsage       myUsage;$/;"	v
my_random	util/rnGen.h	17;"	d
my_srandom	util/rnGen.h	16;"	d
myexit	main/main.cpp	/^myexit()$/;"	f	file:
nAssigns	sat/Solver.h	/^    int     nAssigns() { return trail.size(); }$/;"	f	class:Solver
nClauses	sat/Solver.h	/^    int     nClauses() { return clauses.size(); }$/;"	f	class:Solver
nLearnts	sat/Solver.h	/^    int     nLearnts() { return learnts.size(); }$/;"	f	class:Solver
nVars	sat/Solver.h	/^    int     nVars     ()                    { return assigns.size(); }$/;"	f	class:Solver
newClause	sat/Solver.cpp	/^void Solver::newClause(const vec<Lit>& ps_, bool learnt, ClauseId id , bool A)$/;"	f	class:Solver
newVar	sat/Solver.cpp	/^Var Solver::newVar() {$/;"	f	class:Solver
newVar	sat/VarOrder.h	/^void VarOrder::newVar(void)$/;"	f	class:VarOrder
newVar	sat/sat.h	/^      inline Var newVar() { _solver->newVar(); return _curVar++; }$/;"	f	class:SatSolver
null	sat/File.h	/^    bool null(void) {               \/\/ TRUE if no file is opened.$/;"	f	class:File
numBuckets	util/myHash.h	/^   size_t numBuckets() const { return _numBuckets; }$/;"	f	class:Hash
ok	sat/Heap.h	/^    bool ok(int n) { return n >= 0 && n < (int)indices.size(); }$/;"	f	class:Heap
ok	sat/Solver.h	/^    bool                ok;               \/\/ If FALSE, the constraints are already unsatisfiable. No part of the solver state may be used!$/;"	m	class:Solver
okay	sat/Solver.h	/^    bool    okay() { return ok; }       \/\/ FALSE means solver is in an conflicting state (must never be used again!)$/;"	f	class:Solver
open	sat/File.cpp	/^void File::open(cchar* name, cchar* mode_)$/;"	f	class:File
open	sat/File.cpp	/^void File::open(int file_descr, FileMode m, bool own)$/;"	f	class:File
open	sat/Proof.cpp	/^    char* open(File& fp)$/;"	f	class:TempFiles
open64	sat/File.h	14;"	d
operator !=	sat/Global.h	/^    bool  operator != (const lbool& other) const { return value != other.value; }$/;"	f	class:lbool
operator !=	sat/Global.h	/^template <class T> static inline bool operator != (const T& x, const T& y) { return !(x == y); }$/;"	f
operator !=	sat/SolverTypes.h	/^    bool        operator != (GClause c) const { return data != c.data; }$/;"	f	class:GClause
operator !=	util/myHash.h	/^	 bool operator != ( const iterator& it ) const {$/;"	f	class:Hash::iterator
operator ()	cir/cirFraig.cpp	/^   size_t operator () () const {$/;"	f	class:AigashKey
operator ()	cir/cirSim.cpp	/^	size_t operator () () const {$/;"	f	class:SimKey
operator ()	sat/Solver.cpp	/^    bool operator () (Lit p, Lit q) { return trail_pos[var(p)] > trail_pos[var(q)]; }$/;"	f	class:lastToFirst_lt
operator ()	sat/Solver.cpp	/^struct reduceDB_lt { bool operator () (Clause* x, Clause* y) { return x->size() > 2 && (y->size() == 2 || x->activity() < y->activity()); } };$/;"	f	struct:reduceDB_lt
operator ()	sat/Sort.h	/^    bool operator () (T x, T y) { return x < y; }$/;"	f	struct:LessThan_default
operator ()	sat/VarOrder.h	/^    bool operator () (Var x, Var y) { return activity[x] > activity[y]; }$/;"	f	struct:VarOrder_lt
operator ()	util/rnGen.h	/^      const int operator() (const int range) const {$/;"	f	class:RandomNumGen
operator *	util/myHash.h	/^	 HashNode& operator * () { return _hash->_buckets[_bucketNum][_num]; }$/;"	f	class:Hash::iterator
operator *	util/myHash.h	/^	 const HashNode& operator * () const { return _hash->_buckets[_bucketNum][_num]; }$/;"	f	class:Hash::iterator
operator ++	util/myHash.h	/^	 iterator operator ++ (int) {$/;"	f	class:Hash::iterator
operator ++	util/myHash.h	/^	 iterator& operator ++ () {$/;"	f	class:Hash::iterator
operator --	util/myHash.h	/^	 iterator operator -- (int) {$/;"	f	class:Hash::iterator
operator --	util/myHash.h	/^	 iterator& operator -- () {$/;"	f	class:Hash::iterator
operator <	sat/SolverTypes.h	/^inline bool operator <  (Lit p, Lit q) { return index(p)  < index(q); }  \/\/ '<' guarantees that p, ~p are adjacent in the ordering.$/;"	f
operator <=	sat/Global.h	/^template <class T> static inline bool operator <= (const T& x, const T& y) { return !(y < x);  }$/;"	f
operator =	sat/Global.h	/^    vec<T>&  operator = (vec<T>& other) { TEMPLATE_FAIL; }$/;"	f	class:vec
operator =	util/myHash.h	/^	 iterator& operator = ( const iterator& it ) {$/;"	f	class:Hash::iterator
operator ==	cir/cirFraig.cpp	/^   bool operator == ( const AigashKey& k ) const {$/;"	f	class:AigashKey
operator ==	cir/cirGate.h	/^	bool operator == ( PtrV<Gate> p ) const {$/;"	f	class:PtrV
operator ==	cir/cirSim.cpp	/^	bool operator == ( const SimKey& k ) const {$/;"	f	class:SimKey
operator ==	sat/Global.h	/^    bool  operator == (const lbool& other) const { return value == other.value; }$/;"	f	class:lbool
operator ==	sat/SolverTypes.h	/^    bool        operator == (GClause c) const { return data == c.data; }$/;"	f	class:GClause
operator ==	sat/SolverTypes.h	/^inline bool operator == (Lit p, Lit q) { return index(p) == index(q); }$/;"	f
operator ==	util/myHash.h	/^	 bool operator == ( const iterator& it ) const {$/;"	f	class:Hash::iterator
operator >	sat/Global.h	/^template <class T> static inline bool operator >  (const T& x, const T& y) { return y < x;     }$/;"	f
operator >=	sat/Global.h	/^template <class T> static inline bool operator >= (const T& x, const T& y) { return !(x < y);  }$/;"	f
operator T*	sat/Global.h	/^    operator T*       (void)           { return data; }     \/\/ (unsafe but convenient)$/;"	f	class:vec
operator []	sat/Global.h	/^    T&       operator [] (int index)        { return data[index]; }$/;"	f	class:vec
operator []	sat/Global.h	/^    const T& operator [] (int index) const  { return data[index]; }$/;"	f	class:vec
operator []	sat/SolverTypes.h	/^    Lit       operator [] (int i) const { return data[i]; }$/;"	f	class:Clause
operator []	sat/SolverTypes.h	/^    Lit&      operator [] (int i)       { return data[i]; }$/;"	f	class:Clause
operator []	util/myHash.h	/^   CacheNode& operator [] (size_t i) { return _cache[i]; }$/;"	f	class:Cache
operator []	util/myHash.h	/^   const CacheNode& operator [](size_t i) const { return _cache[i]; }$/;"	f	class:Cache
operator []	util/myHash.h	/^   const vector<HashNode>& operator [](size_t i) const { return _buckets[i]; }$/;"	f	class:Hash
operator []	util/myHash.h	/^   vector<HashNode>& operator [] (size_t i) { return _buckets[i]; }$/;"	f	class:Hash
operator const T*	sat/Global.h	/^    operator const T* (void) const     { return data; }$/;"	f	class:vec
operator ~	sat/Global.h	/^    lbool operator ~  (void)               const { return lbool(-value); }$/;"	f	class:lbool
operator ~	sat/SolverTypes.h	/^inline Lit operator ~ (Lit p) { Lit q; q.x = p.x ^ 1; return q; }$/;"	f
optimize	cir/cirOpt.cpp	/^CirMgr::optimize()$/;"	f	class:CirMgr
order	sat/Solver.h	/^    VarOrder            order;            \/\/ Keeps track of the decision variable order.$/;"	m	class:Solver
own_fd	sat/File.h	/^    bool        own_fd;     \/\/ Do we own the file descriptor? If so, will close file in destructor.$/;"	m	class:File
packInputs	cir/cirFraig.cpp	/^CirMgr::packInputs( const SatSolver& s )$/;"	f	class:CirMgr
parent	sat/Heap.h	/^static inline int parent(int i) { return i >> 1; }$/;"	f
parseError	cir/cirMgr.cpp	/^parseError(CirParseError err)$/;"	f	file:
percolateDown	sat/Heap.h	/^    inline void percolateDown(int i)$/;"	f	class:Heap
percolateUp	sat/Heap.h	/^    inline void percolateUp(int i)$/;"	f	class:Heap
pop	sat/Global.h	/^    void     pop    (void)             { sz--, data[sz].~T(); }$/;"	f	class:vec
pos	sat/File.h	/^    int         pos;        \/\/ Current position in buffer$/;"	m	class:File
printFEC	cir/cirFraig.cpp	/^CirMgr::printFEC() const$/;"	f	class:CirMgr
printFECPairs	cir/cirMgr.cpp	/^CirMgr::printFECPairs() const$/;"	f	class:CirMgr
printFanInOut	cir/cirGate.cpp	/^CirGate::printFanInOut( bool isFanin, int level, int indent, bool isInv ) const$/;"	f	class:CirGate
printFanInOut	cir/cirGate.cpp	/^UndefGate::printFanInOut( bool isFanin, int level, int indent, bool isInv )$/;"	f	class:UndefGate
printFloatGates	cir/cirMgr.cpp	/^CirMgr::printFloatGates() const$/;"	f	class:CirMgr
printGate	cir/cirGate.cpp	/^CirGate::printGate() const$/;"	f	class:CirGate
printGate	cir/cirGate.cpp	/^Const0Gate::printGate() const$/;"	f	class:Const0Gate
printNetlist	cir/cirMgr.cpp	/^CirMgr::printNetlist() const$/;"	f	class:CirMgr
printPIs	cir/cirMgr.cpp	/^CirMgr::printPIs() const$/;"	f	class:CirMgr
printPOs	cir/cirMgr.cpp	/^CirMgr::printPOs() const$/;"	f	class:CirMgr
printSimLog	cir/cirSim.cpp	/^printSimLog( unsigned til )$/;"	f
printSpaces	cir/cirGate.cpp	/^CirGate::printSpaces( int indent ) const$/;"	f	class:CirGate
printStats	sat/Solver.cpp	/^void Solver::printStats()$/;"	f	class:Solver
printStats	sat/sat.h	/^      void printStats() const { const_cast<Solver*>(_solver)->printStats(); }$/;"	f	class:SatSolver
printSummary	cir/cirMgr.cpp	/^CirMgr::printSummary() const$/;"	f	class:CirMgr
progressEstimate	sat/Solver.cpp	/^double Solver::progressEstimate()$/;"	f	class:Solver
progress_estimate	sat/Solver.h	/^    double      progress_estimate;  \/\/ Set by 'search()'.$/;"	m	class:Solver
proof	sat/Solver.h	/^    Proof*          proof;              \/\/ Set this directly after constructing 'Solver' to enable proof logging. Initialized to NULL.$/;"	m	class:Solver
propagate	sat/Solver.cpp	/^Clause* Solver::propagate()$/;"	f	class:Solver
propagate_tmpbin	sat/Solver.h	/^    Clause*             propagate_tmpbin;$/;"	m	class:Solver
propagations	sat/Solver.h	/^    int64   starts, decisions, propagations, conflicts;$/;"	m	struct:SolverStats
ptr	cir/cirGate.h	/^	Gate* ptr() const { $/;"	f	class:PtrV
ptrV2Lit	cir/cirMgr.cpp	/^CirMgr::ptrV2Lit( PtrV<CirGate> p ) const$/;"	f	class:CirMgr
ptrVIdComp	cir/cirFraig.cpp	/^ptrVIdComp( PtrV<CirGate> a, PtrV<CirGate> b )$/;"	f
push	sat/Global.h	/^    void     push  (const T& elem)     { if (sz == cap) grow(sz+1); new (&data[sz]) T(elem); sz++; }$/;"	f	class:vec
push	sat/Global.h	/^    void     push  (void)              { if (sz == cap) grow(sz+1); new (&data[sz]) T()    ; sz++; }$/;"	f	class:vec
putChar	sat/File.h	/^    int putChar(int chr) {$/;"	f	class:File
putCharQ	sat/File.h	/^    int putCharQ(int chr) {         \/\/ Quick version with minimal overhead -- don't call this in the wrong mode!$/;"	f	class:File
putInt	sat/File.h	/^static inline void   putInt  (File& out, int64 val) { putUInt(out, encode64(val)); }$/;"	f
putUInt	sat/File.cpp	/^void putUInt(File& out, uint64 val)$/;"	f
qhead	sat/Solver.h	/^    int                 qhead;            \/\/ Head of queue (as index into the trail -- no more explicit propagation queue in MiniSat).$/;"	m	class:Solver
randomSim	cir/cirSim.cpp	/^CirMgr::randomSim()$/;"	f	class:CirMgr
random_seed	sat/VarOrder.h	/^    double              random_seed; \/\/ For the internal random number generator$/;"	m	class:VarOrder
random_var_freq	sat/Solver.h	/^    double  var_decay, clause_decay, random_var_freq;    \/\/ (reasonable values are: 0.95, 0.999, 0.02)    $/;"	m	struct:SearchParams
read	util/myHash.h	/^   bool read(const CacheKey& k, CacheData& d) const { return false; }$/;"	f	class:Cache
readCircuit	cir/cirMgr.cpp	/^CirMgr::readCircuit(const string& fileName)$/;"	f	class:CirMgr
reason	sat/Solver.h	/^    vec<Clause*>        reason;           \/\/ 'reason[var]' is the clause that implied the variables current value, or 'NULL' if none.$/;"	m	class:Solver
reduceDB	sat/Solver.cpp	/^void Solver::reduceDB()$/;"	f	class:Solver
reduceDB_lt	sat/Solver.cpp	/^struct reduceDB_lt { bool operator () (Clause* x, Clause* y) { return x->size() > 2 && (y->size() == 2 || x->activity() < y->activity()); } };$/;"	s	file:
release	sat/Global.h	/^    T*       release  (void)           { T* ret = data; data = NULL; sz = 0; cap = 0; return ret; }$/;"	f	class:vec
releaseDescriptor	sat/File.h	/^    int releaseDescriptor(void) {   \/\/ Don't run UNIX function 'close()' on descriptor in 'File's 'close()'.$/;"	f	class:File
remove	sat/Solver.cpp	/^void Solver::remove(Clause* c, bool just_dealloc)$/;"	f	class:Solver
removeData	util/util.h	/^void removeData(T& l, const D& d)$/;"	f
removeWatch	sat/Solver.cpp	/^void removeWatch(vec<Clause*>& ws, Clause* elem)$/;"	f
replaceInsert	util/myHash.h	/^   bool replaceInsert(const HashKey& k, const HashData& d) { $/;"	f	class:Hash
replaceWithFaninNo	cir/cirGate.cpp	/^CirGate::replaceWithFaninNo( unsigned n )$/;"	f	class:CirGate
replaceWithGate	cir/cirGate.cpp	/^CirGate::replaceWithGate( CirGate* g, bool gInv )$/;"	f	class:CirGate
report	util/myUsage.h	/^   void report(bool repTime, bool repMem) {$/;"	f	class:MyUsage
reportFanin	cir/cirGate.cpp	/^CirGate::reportFanin(int level) const$/;"	f	class:CirGate
reportFanout	cir/cirGate.cpp	/^CirGate::reportFanout(int level) const$/;"	f	class:CirGate
reportGate	cir/cirGate.cpp	/^CirGate::reportGate() const$/;"	f	class:CirGate
reportf	sat/Solver.h	28;"	d
reset	sat/sat.h	/^      void reset() {$/;"	f	class:SatSolver
reset	util/myHash.h	/^   void reset() { $/;"	f	class:Hash
reset	util/myHash.h	/^   void reset() { }$/;"	f	class:Cache
reset	util/myUsage.h	/^   void reset() {$/;"	f	class:MyUsage
reset_keypress	util/myGetChar.cpp	/^static void reset_keypress(void)$/;"	f	file:
resolve	sat/Proof.cpp	/^void Proof::resolve(ClauseId next, Lit x)$/;"	f	class:Proof
right	sat/Heap.h	/^static inline int right (int i) { return i+i + 1; }$/;"	f
root_level	sat/Solver.h	/^    int                 root_level;       \/\/ Level of first proper decision.$/;"	m	class:Solver
save	sat/Proof.cpp	/^bool Proof::save(cchar* filename)$/;"	f	class:Proof
search	sat/Solver.cpp	/^lbool Solver::search(int nof_conflicts, int nof_learnts, const SearchParams& params)$/;"	f	class:Solver
seek	sat/File.cpp	/^void File::seek(int64 file_pos, int whence)$/;"	f	class:File
select	sat/VarOrder.h	/^Var VarOrder::select(double random_var_freq)$/;"	f	class:VarOrder
selectionSort	sat/Sort.h	/^template <class T> static inline void selectionSort(T* array, int size) {$/;"	f
selectionSort	sat/Sort.h	/^void selectionSort(T* array, int size, LessThan lt)$/;"	f
selfIsolate	cir/cirGate.cpp	/^CirGate::selfIsolate()$/;"	f	class:CirGate
selfOptimize	cir/cirGate.cpp	/^AigGate::selfOptimize( CirGate* the0 )$/;"	f	class:AigGate
selfOptimize	cir/cirGate.h	/^   virtual bool selfOptimize( CirGate* the0 ) { return false; }$/;"	f	class:CirGate
setBounds	sat/Heap.h	/^    void setBounds (int size) { assert(size >= 0); indices.growTo(size,0); }$/;"	f	class:Heap
setFecGrpId	cir/cirGate.h	/^   void setFecGrpId( unsigned f ) {$/;"	f	class:CirGate
setGlobalRef	cir/cirGate.h	/^   static void setGlobalRef() { ++_globalRef; }$/;"	f	class:CirGate
setMemUsage	util/myUsage.h	/^   void setMemUsage() { _currentMem = checkMem() - _initMem; }$/;"	f	class:MyUsage
setMode	sat/File.h	/^    void setMode(FileMode m) {$/;"	f	class:File
setName	cir/cirGate.h	/^   void setName( const string& s ) { _name = s; }$/;"	f	class:CirGate
setSimBit	cir/cirGate.cpp	/^PIGate::setSimBit( unsigned b, unsigned i )$/;"	f	class:PIGate
setSimLog	cir/cirMgr.h	/^   void setSimLog(ofstream *logFile) { _simLog = logFile; }$/;"	f	class:CirMgr
setTimeUsage	util/myUsage.h	/^   void setTimeUsage() {$/;"	f	class:MyUsage
setToGlobalRef	cir/cirGate.h	/^   void setToGlobalRef() const { _ref = _globalRef; }$/;"	f	class:CirGate
setVar	cir/cirGate.h	/^   void setVar( int si ) { _satVar = si; }$/;"	f	class:CirGate
set_keypress	util/myGetChar.cpp	/^static void set_keypress(void)$/;"	f	file:
shrink	sat/Global.h	/^    void     shrink (int nelems)       { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }$/;"	f	class:vec
sign	sat/SolverTypes.h	/^inline bool sign  (Lit p) { return p.x & 1; }$/;"	f
simpDB_assigns	sat/Solver.h	/^    int                 simpDB_assigns;   \/\/ Number of top-level assignments since last execution of 'simplifyDB()'.$/;"	m	class:Solver
simpDB_props	sat/Solver.h	/^    int64               simpDB_props;     \/\/ Remaining number of propagations that must be made before next execution of 'simplifyDB()'.$/;"	m	class:Solver
simplify	sat/Solver.cpp	/^bool Solver::simplify(Clause* c) const$/;"	f	class:Solver
simplifyDB	sat/Solver.cpp	/^void Solver::simplifyDB()$/;"	f	class:Solver
simulate	cir/cirGate.cpp	/^AigGate::simulate()$/;"	f	class:AigGate
simulate	cir/cirGate.cpp	/^POGate::simulate()$/;"	f	class:POGate
simulate	cir/cirGate.h	/^	virtual void simulate() {};$/;"	f	class:Const0Gate
simulate	cir/cirGate.h	/^	virtual void simulate() {};$/;"	f	class:PIGate
simulate	cir/cirGate.h	/^	virtual void simulate() {};$/;"	f	class:UndefGate
size	sat/File.h	/^    int         size;       \/\/ Size of buffer (at end of file, less than 'File_BufSize').$/;"	m	class:File
size	sat/Global.h	/^    int      size   (void) const       { return sz; }$/;"	f	class:vec
size	sat/SolverTypes.h	/^    int       size        ()      const { return size_learnt >> 1; }$/;"	f	class:Clause
size	util/myHash.h	/^   size_t size() const { $/;"	f	class:Hash
size	util/myHash.h	/^   size_t size() const { return _size; }$/;"	f	class:Cache
size_learnt	sat/SolverTypes.h	/^    uint    size_learnt;$/;"	m	class:Clause
solve	sat/Solver.cpp	/^bool Solver::solve(const vec<Lit>& assumps)$/;"	f	class:Solver
solve	sat/Solver.h	/^    bool    solve() { vec<Lit> tmp; return solve(tmp); }$/;"	f	class:Solver
solve	sat/sat.h	/^      bool solve() { _solver->solve(); return _solver->okay(); }$/;"	f	class:SatSolver
sort	sat/Sort.h	/^template <class T, class LessThan> void sort(T* array, int size, LessThan lt) {$/;"	f
sort	sat/Sort.h	/^template <class T, class LessThan> void sort(vec<T>& v, LessThan lt) {$/;"	f
sort	sat/Sort.h	/^template <class T> static inline void sort(T* array, int size) {$/;"	f
sort	sat/Sort.h	/^template <class T> void sort(vec<T>& v) {$/;"	f
sort	sat/Sort.h	/^void sort(T* array, int size, LessThan lt, double& seed)$/;"	f
sortUnique	sat/Sort.h	/^template <class T, class LessThan> void sortUnique(vec<T>& v, LessThan lt) {$/;"	f
sortUnique	sat/Sort.h	/^template <class T> static inline void sortUnique(T* array, int& size) {$/;"	f
sortUnique	sat/Sort.h	/^template <class T> void sortUnique(vec<T>& v) {$/;"	f
sortUnique	sat/Sort.h	/^void sortUnique(T* array, int& size, LessThan lt)$/;"	f
starts	sat/Solver.h	/^    int64   starts, decisions, propagations, conflicts;$/;"	m	struct:SolverStats
stats	sat/Solver.h	/^    SolverStats     stats;$/;"	m	class:Solver
stored_settings	util/myGetChar.cpp	/^static struct termios stored_settings;$/;"	v	typeref:struct:termios	file:
strash	cir/cirFraig.cpp	/^CirMgr::strash()$/;"	f	class:CirMgr
sweep	cir/cirOpt.cpp	/^CirMgr::sweep()$/;"	f	class:CirMgr
sz	sat/Global.h	/^    int sz;$/;"	m	class:vec
tell	sat/File.cpp	/^int64 File::tell(void)$/;"	f	class:File
temp_files	sat/Proof.cpp	/^static TempFiles temp_files;       \/\/ (should be singleton)$/;"	v	file:
toDimacs	sat/SolverTypes.h	/^inline int toDimacs(Lit p) { return sign(p) ? -var(p) - 1 : var(p) + 1; }$/;"	f
toInt	sat/Global.h	/^    int toInt(void) const { return value; }$/;"	f	class:lbool
toInt	sat/Global.h	/^inline int   toInt  (lbool l) { return l.toInt(); }$/;"	f
toLbool	sat/Global.h	/^inline lbool toLbool(int   v) { return lbool(v);  }$/;"	f
toLit	sat/SolverTypes.h	/^inline Lit  toLit (int i) { Lit p; p.x = i; return p; }  \/\/ Inverse of 'index()'.$/;"	f
toNextBuc	util/myHash.h	/^	 void toNextBuc() {$/;"	f	class:Hash::iterator
toPrevBuc	util/myHash.h	/^	 void toPrevBuc() {$/;"	f	class:Hash::iterator
tot_literals	sat/Solver.h	/^    int64   clauses_literals, learnts_literals, max_literals, tot_literals;$/;"	m	struct:SolverStats
trail	sat/Solver.h	/^    vec<Lit>            trail;            \/\/ Assignment stack; stores all assigments made in the order they were made.$/;"	m	class:Solver
trail_lim	sat/Solver.h	/^    vec<int>            trail_lim;        \/\/ Separator indices for different decision levels in 'trail[]'.$/;"	m	class:Solver
trail_pos	sat/Solver.cpp	/^    const vec<int>& trail_pos;$/;"	m	class:lastToFirst_lt	file:
trail_pos	sat/Solver.h	/^    vec<int>            trail_pos;        \/\/ 'trail_pos[var]' is the variable's position in 'trail[]'. This supersedes 'level[]' in some sense, and 'level[]' will probably be removed in future releases.$/;"	m	class:Solver
trav	sat/Proof.h	/^    ProofTraverser* trav;$/;"	m	class:Proof
traverse	sat/Proof.cpp	/^void Proof::traverse(ProofTraverser& trav, ClauseId goal)$/;"	f	class:Proof
typeName	cir/cirGate.h	/^	static string typeName() { return _typeStr; }$/;"	f	class:AigGate
typeName	cir/cirGate.h	/^	static string typeName() { return _typeStr; }$/;"	f	class:Const0Gate
typeName	cir/cirGate.h	/^	static string typeName() { return _typeStr; }$/;"	f	class:PIGate
typeName	cir/cirGate.h	/^	static string typeName() { return _typeStr; }$/;"	f	class:POGate
typeName	cir/cirGate.h	/^	static string typeName() { return _typeStr; }$/;"	f	class:UndefGate
uchar	sat/Global.h	/^typedef unsigned char uchar;$/;"	t
uint64	sat/Global.h	/^typedef UINT64             uint64;$/;"	t
uint64	sat/Global.h	/^typedef unsigned long long uint64;$/;"	t
uintp	sat/Global.h	/^typedef UINT_PTR           uintp;$/;"	t
uintp	sat/Global.h	/^typedef unsigned __PTRDIFF_TYPE__ uintp;$/;"	t
undo	sat/VarOrder.h	/^void VarOrder::undo(Var x)$/;"	f	class:VarOrder
unit_id	sat/Solver.h	/^    vec<ClauseId>       unit_id;          \/\/ 'unit_id[var]' is the clause ID for the unit literal 'var' or '~var' (if set at toplevel).$/;"	m	class:Solver
unsign	sat/SolverTypes.h	/^inline Lit  unsign(Lit p) { Lit q; q.x = p.x & ~1; return q; }$/;"	f
update	sat/VarOrder.h	/^void VarOrder::update(Var x)$/;"	f	class:VarOrder
updateFECs	cir/cirSim.cpp	/^CirMgr::updateFECs()$/;"	f	class:CirMgr
usage	cir/cirCmd.cpp	/^CirFraigCmd::usage(ostream& os) const$/;"	f	class:CirFraigCmd
usage	cir/cirCmd.cpp	/^CirGateCmd::usage(ostream& os) const$/;"	f	class:CirGateCmd
usage	cir/cirCmd.cpp	/^CirOptCmd::usage(ostream& os) const$/;"	f	class:CirOptCmd
usage	cir/cirCmd.cpp	/^CirPrintCmd::usage(ostream& os) const$/;"	f	class:CirPrintCmd
usage	cir/cirCmd.cpp	/^CirReadCmd::usage(ostream& os) const$/;"	f	class:CirReadCmd
usage	cir/cirCmd.cpp	/^CirSimCmd::usage(ostream& os) const$/;"	f	class:CirSimCmd
usage	cir/cirCmd.cpp	/^CirStrashCmd::usage(ostream& os) const$/;"	f	class:CirStrashCmd
usage	cir/cirCmd.cpp	/^CirSweepCmd::usage(ostream& os) const$/;"	f	class:CirSweepCmd
usage	cir/cirCmd.cpp	/^CirWriteCmd::usage(ostream& os) const$/;"	f	class:CirWriteCmd
usage	main/main.cpp	/^usage()$/;"	f	file:
value	sat/Global.h	/^    int     value;$/;"	m	class:lbool
value	sat/Solver.h	/^    lbool   value(Lit p) const { return sign(p) ? ~toLbool(assigns[var(p)]) : toLbool(assigns[var(p)]); }$/;"	f	class:Solver
value	sat/Solver.h	/^    lbool   value(Var x) const { return toLbool(assigns[x]); }$/;"	f	class:Solver
var	sat/SolverTypes.h	/^inline int  var   (Lit p) { return p.x >> 1; }$/;"	f
varBumpActivity	sat/Solver.h	/^    void     varBumpActivity(Lit p) {$/;"	f	class:Solver
varDecayActivity	sat/Solver.h	/^    void     varDecayActivity  () { if (var_decay >= 0) var_inc *= var_decay; }$/;"	f	class:Solver
varRescaleActivity	sat/Solver.cpp	/^void Solver::varRescaleActivity()$/;"	f	class:Solver
var_Undef	sat/SolverTypes.h	37;"	d
var_decay	sat/Solver.h	/^    double              var_decay;        \/\/ INVERSE decay factor for variable activity: stores 1\/decay. Use negative value for static variable order.$/;"	m	class:Solver
var_decay	sat/Solver.h	/^    double  var_decay, clause_decay, random_var_freq;    \/\/ (reasonable values are: 0.95, 0.999, 0.02)    $/;"	m	struct:SearchParams
var_inc	sat/Solver.h	/^    double              var_inc;          \/\/ Amount to bump next variable with.$/;"	m	class:Solver
vec	sat/Global.h	/^             vec        (vec<T>& other) { TEMPLATE_FAIL; }$/;"	f	class:vec
vec	sat/Global.h	/^    vec(T* array, int size)     : data(array), sz(size), cap(size) { }      \/\/ (takes ownership of array -- will be deallocated with 'xfree()')$/;"	f	class:vec
vec	sat/Global.h	/^    vec(int size)               : data(NULL) , sz(0)   , cap(0)    { growTo(size); }$/;"	f	class:vec
vec	sat/Global.h	/^    vec(int size, const T& pad) : data(NULL) , sz(0)   , cap(0)    { growTo(size, pad); }$/;"	f	class:vec
vec	sat/Global.h	/^    vec(void)                   : data(NULL) , sz(0)   , cap(0)    { }$/;"	f	class:vec
vec	sat/Global.h	/^class vec {$/;"	c
verbosity	sat/Solver.h	/^    int             verbosity;          \/\/ Verbosity level. 0=silent, 1=some progress report, 2=everything$/;"	m	class:Solver
watches	sat/Solver.h	/^    vec<vec<Clause*> >  watches;          \/\/ 'watches[lit]' is a list of constraints watching 'lit' (will go there if literal becomes true).$/;"	m	class:Solver
write	util/myHash.h	/^   void write(const CacheKey& k, const CacheData& d) { }$/;"	f	class:Cache
writeAag	cir/cirMgr.cpp	/^CirMgr::writeAag(ostream& outfile) const$/;"	f	class:CirMgr
x	sat/SolverTypes.h	/^    int     x;$/;"	m	class:Lit
xfree	sat/Global.h	/^template<class T> static inline void xfree(T *ptr) {$/;"	f
xmalloc	sat/Global.h	/^template<class T> static inline T* xmalloc(size_t size) {$/;"	f
xrealloc	sat/Global.h	/^template<class T> static inline T* xrealloc(T* ptr, size_t size) {$/;"	f
~AigGate	cir/cirGate.h	/^	virtual ~AigGate() {}$/;"	f	class:AigGate
~Cache	util/myHash.h	/^   ~Cache() { reset(); }$/;"	f	class:Cache
~CirGate	cir/cirGate.h	/^   virtual ~CirGate() {}$/;"	f	class:CirGate
~CirMgr	cir/cirMgr.h	/^   ~CirMgr() {}$/;"	f	class:CirMgr
~Const0Gate	cir/cirGate.h	/^	virtual ~Const0Gate() {}$/;"	f	class:Const0Gate
~File	sat/File.h	/^   ~File(void) {$/;"	f	class:File
~Hash	util/myHash.h	/^   ~Hash() { reset(); }$/;"	f	class:Hash
~PIGate	cir/cirGate.h	/^	virtual ~PIGate() {}$/;"	f	class:PIGate
~POGate	cir/cirGate.h	/^	virtual ~POGate() {}$/;"	f	class:POGate
~ProofTraverser	sat/Proof.h	/^    virtual ~ProofTraverser(){}$/;"	f	struct:ProofTraverser
~SatSolver	sat/sat.h	/^      ~SatSolver() { }$/;"	f	class:SatSolver
~Solver	sat/Solver.h	/^   ~Solver() {$/;"	f	class:Solver
~TempFiles	sat/Proof.cpp	/^   ~TempFiles()$/;"	f	class:TempFiles
~UndefGate	cir/cirGate.h	/^	virtual ~UndefGate() {}$/;"	f	class:UndefGate
~vec	sat/Global.h	/^   ~vec(void)                                                      { clear(true); }$/;"	f	class:vec
